package com.lmu.trackingapp.models

	index
	description
	event
	eventName
	id
	timestamp
	timezoneOffset
	name
	packageName
	studyID
	correct_timestamp
	weekday
	dataKey
	infoText
	interaction
	priority
	subText
	mobile_BYTES_RECEIVED
	mobile_BYTES_TRANSMITTED
	wifi_BYTES_RECEIVED
	wifi_BYTES_TRANSMITTED
	category
	session_id


"23-03-2022 17:40:08,775 USAGE_EVENTS": {
		"description": "Android system",
		"event": "SCREEN_NON_INTERACTIVE",
		"eventName": "USAGE_EVENTS",
		"id": "1648053628075_393cc87d-21c0-4d6b-8447-a437ce721051",
		"packageName": "android",
		"metaData" : "",
		"timestamp": 1648053608775,
		"timezoneOffset": 3600000
	},

"23-03-2022 18:19:59,120 NOTIFICATION ": {
 	"description ": " - 2119633786 ",
 	"event ": "1582296304 ",
 	"eventName ": "NOTIFICATION ",
 	"id ": "",
 	"metaData ": {
 		"category ": "msg ",
 		"dataKey ": "NOTIFICATION_META ",
 		"infoText ": "",
 		"interaction ": "NOTIFICATION_REMOVED ",
 		"priority ": 0,
 		"subText ": ""
 	},
 	"packageName ": "org.telegram.messenger ",
 	"timestamp ": 1648055999120,
 	"timezoneOffset ": 3600000
 },


 weekday:
 0: Monday


enum class LogEventName {

    ACCESSIBILITY,
    ACCESSIBILITY_BROWSER_URL,
    ACCESSIBILITY_KEYBOARD_INPUT,
    APPS_INSTALL,
    AIRPLANEMODE,
    ACCELEROMETER,
    ACTIVITY,
    BLUETOOTH,
    BOOT,
    DATA_TRAFFIC,
    DEVICE_INFO,
    ESM,
    GYROSCOPE,
    INTERNET,
    INSTALLED_APP,
    LIGHT,
    NOTIFICATION,
    PHONE_ORIENTATION,
    PHONE,
    POWER,
    PROXIMITY,
    RINGER_MODE,
    SCREEN,
    SCREEN_ORIENTATION,
    SMS,
    USAGE_EVENTS
}

enum class BootEventType {
    BOOTED,
    SHUTDOWN,
    REBOOT
}

enum class ONOFFSTATE {
    ON,
    OFF
}

enum class PowerState {
    CONNECTED,
    DISCONNECTED
}

enum class ESMQuestionType{
    ESM_UNLOCK_INTENTION,
    ESM_LOCK_Q_FINISH,
    ESM_LOCK_Q_MORE,
    ESM_LOCK_Q_TRACK_OF_TIME,
    ESM_LOCK_Q_TRACK_OF_SPACE,
    ESM_LOCK_Q_EMOTION,
    ESM_LOCK_Q_REGRET,
    ESM_LOCK_Q_AGENCY,
}

enum class ScreenState {
    ON_LOCKED,
    ON_UNLOCKED,
    OFF_UNLOCKED,
    OFF_LOCKED,
    ON_USERPRESENT,
    UNKNOWN
}

enum class NotificationInteraction {
        NOTIFICATION_POSTED,
        NOTIFICATION_REMOVED
    }

Where This only is used id WIFI is enabled
enum class WifiConnectionState {
    DISABLED,
    ENABLED,
    UNKNOWN
}

UNKNOWN if no Internetconnection exists
enum class ConnectionType {
    CONNECTED_WIFI,
    CONNECTED_MOBILE,
    CONNECTED_ETHERNET,
    CONNECTED_VPN,
    UNKNOWN
}

enum class SmsEventType {
    UNKNOWN,
    INBOX,
    SENT,
    DRAFT,
    OUTBOX
}

enum class ScreenOrientationType {
    SCREEN_ORIENTATION_PORTRAIT,
    SCREEN_ORIENTATION_LANDSCAPE,
    SCREEN_ORIENTATION_UNDEFINED
}

enum class RingerMode {
    SILENT_MODE,
    VIBRATE_MODE,
    NORMAL_MODE,
    UNKNOWN
}

enum class SensorAccuracy {
    ACCURACY_UNRELAIABLE,
    ACCURACY_ELSE
}

enum class ActivityType {
    IN_VEHICLE,
    ON_BICYCLE,
    ON_FOOT,
    RUNNING,
    STILL,
    TILTING,
    WALKING,
    UNKNOWN
}

enum class ActivityTransitionType {
    ACTIVITY_TRANSITION_ENTER,
    ACTIVITY_TRANSITION_EXIT,
    ACTIVITY_TRANSITION_UNKNOWN
}

enum class InstallEventType {
    INSTALLED,
    UPDATED,
    UNINSTALLED_AND_DATA_REMOVED,
    UNINSTALLED,
    DATA_CLEARED,
    UNKNOWN
}


ADMIN:
    RESTARTED_LOGGING
    RESTARTED_LOGGING_WORKER
    LOGOUT
    LOGIN


notification prio
IMPORTANCE_NON: 0
IMPORTANCE_MIN: 1
IMPORTANCE_LOW: 2
IMPORTANCE_DEFAULT: 3
IMPORTANCE_HIGH: 4
IMPORTANCE_MAX: 5
IMPORTANCE_UNSPECIFIED: -10000

SMSType{
 1 -> SmsEventType.INBOX
 2 -> SmsEventType.SENT
 3 -> SmsEventType.DRAFT
 4 -> SmsEventType.OUTBOX
 else -> SmsEventType.UNKNOWN
}

PHONEEvent{
RINGING
ONHOLD
  1 -> "INCOMING"
  2 -> "OUTGOING"
  3 -> "MISSED"
  4 -> "VOICEMAIL"
  5 -> "REJECTED"
  6 -> "BLOCKED"
  7 -> "ANSWERED_EXTERNALLY"
   else -> "UNKNOWN: $type"
   }

Activity{
 DetectedActivity.IN_VEHICLE
                DetectedActivity.ON_BICYCLE
                DetectedActivity.ON_FOOT
                DetectedActivity.RUNNING
                DetectedActivity.STILL
                DetectedActivity.TILTING
                DetectedActivity.WALKING
                ActivityType.UNKNOWN.name
}

usage events:
https://developer.android.com/reference/android/app/usage/UsageEvents.Event
    ACTIVITY_PAUSED
    ACTIVITY_RESUMED
    ACTIVITY_STOPPED
    CONFIGURATION_CHANGE // device configuration changes
    DEVICE_SHUTDOWN
    DEVICE_STARTUP
    FOREGROUND_SERVICE_START
    FOREGROUND_SERVICE_STOP
    KEYGUARD_HIDDEN
    KEYGUARD_SHOWN
    MOVE_TO_BACKGROUND// deprecated in API 29 by ACTIVITY_PAUSED
    MOVE_TO_FOREGROUND// deprecated in API 29 by ACTIVITY_RESUMED
    NONE
    SCREEN_INTERACTIVE
    SCREEN_NON_INTERACTIVE
    SHORTCUT_INVOCATION
    STANDBY_BUCKET_CHANGED
    USER_INTERACTION
    NOTIFICATION_INTERRUPTION 12
    NOTIFICATION_SEEN 10
    UNKNOWN

AccessibilityEvent.TYPE_ANNOUNCEMENT -> return "TYPE_ANNOUNCEMENT"
            AccessibilityEvent.TYPE_TOUCH_INTERACTION_END 
            AccessibilityEvent.TYPE_TOUCH_INTERACTION_START 
            AccessibilityEvent.TYPE_VIEW_CLICKED
            AccessibilityEvent.TYPE_VIEW_HOVER_ENTER
            AccessibilityEvent.TYPE_VIEW_HOVER_EXIT 
            AccessibilityEvent.TYPE_VIEW_LONG_CLICKED 
            AccessibilityEvent.TYPE_VIEW_SCROLLED 
            AccessibilityEvent.TYPE_VIEW_SELECTED
            AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED -> ACCESSIBILITY_KEYBOARD_INPUT
            AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED -> ACCESSIBILITY_BROWSER_URL
            AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED -> ACCESSIBILITY_BROWSER_URL
            AccessibilityEvent.TYPE_VIEW_CONTEXT_CLICKED
            AccessibilityEvent.TYPE_WINDOWS_CHANGED 

			
enum class BluetoothDeviceType(val constant: BluetoothClassType) {
    AUDIO_VIDEO_CAMCORDER(BluetoothClass.Device.AUDIO_VIDEO_CAMCORDER),
    AUDIO_VIDEO_CAR_AUDIO(BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO),
    AUDIO_VIDEO_HANDSFREE(BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE),
    AUDIO_VIDEO_HEADPHONES(BluetoothClass.Device.AUDIO_VIDEO_HEADPHONES),
    AUDIO_VIDEO_HIFI_AUDIO(BluetoothClass.Device.AUDIO_VIDEO_HIFI_AUDIO),
    AUDIO_VIDEO_LOUDSPEAKER(BluetoothClass.Device.AUDIO_VIDEO_LOUDSPEAKER),
    AUDIO_VIDEO_MICROPHONE(BluetoothClass.Device.AUDIO_VIDEO_MICROPHONE),
    AUDIO_VIDEO_PORTABLE_AUDIO(BluetoothClass.Device.AUDIO_VIDEO_PORTABLE_AUDIO),
    AUDIO_VIDEO_SET_TOP_BOX(BluetoothClass.Device.AUDIO_VIDEO_SET_TOP_BOX),
    AUDIO_VIDEO_UNCATEGORIZED(BluetoothClass.Device.AUDIO_VIDEO_UNCATEGORIZED),
    AUDIO_VIDEO_VCR(BluetoothClass.Device.AUDIO_VIDEO_VCR),
    AUDIO_VIDEO_VIDEO_CAMERA(BluetoothClass.Device.AUDIO_VIDEO_VIDEO_CAMERA),
    AUDIO_VIDEO_VIDEO_CONFERENCING(BluetoothClass.Device.AUDIO_VIDEO_VIDEO_CONFERENCING),
    AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER(BluetoothClass.Device.AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER),
    AUDIO_VIDEO_VIDEO_GAMING_TOY(BluetoothClass.Device.AUDIO_VIDEO_VIDEO_GAMING_TOY),
    AUDIO_VIDEO_VIDEO_MONITOR(BluetoothClass.Device.AUDIO_VIDEO_VIDEO_MONITOR),
    AUDIO_VIDEO_WEARABLE_HEADSET(BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET),
    COMPUTER_DESKTOP(BluetoothClass.Device.COMPUTER_DESKTOP),
    COMPUTER_HANDHELD_PC_PDA(BluetoothClass.Device.COMPUTER_HANDHELD_PC_PDA),
    COMPUTER_LAPTOP(BluetoothClass.Device.COMPUTER_LAPTOP),
    COMPUTER_PALM_SIZE_PC_PDA(BluetoothClass.Device.COMPUTER_PALM_SIZE_PC_PDA),
    COMPUTER_SERVER(BluetoothClass.Device.COMPUTER_SERVER),
    COMPUTER_UNCATEGORIZED(BluetoothClass.Device.COMPUTER_UNCATEGORIZED),
    COMPUTER_WEARABLE(BluetoothClass.Device.COMPUTER_WEARABLE),
    HEALTH_BLOOD_PRESSURE(BluetoothClass.Device.HEALTH_BLOOD_PRESSURE),
    HEALTH_DATA_DISPLAY(BluetoothClass.Device.HEALTH_DATA_DISPLAY),
    HEALTH_GLUCOSE(BluetoothClass.Device.HEALTH_GLUCOSE),
    HEALTH_PULSE_OXIMETER(BluetoothClass.Device.HEALTH_PULSE_OXIMETER),
    HEALTH_PULSE_RATE(BluetoothClass.Device.HEALTH_PULSE_RATE),
    HEALTH_THERMOMETER(BluetoothClass.Device.HEALTH_THERMOMETER),
    HEALTH_UNCATEGORIZED(BluetoothClass.Device.HEALTH_UNCATEGORIZED),
    HEALTH_WEIGHING(BluetoothClass.Device.HEALTH_WEIGHING),
    PHONE_CELLULAR(BluetoothClass.Device.PHONE_CELLULAR),
    PHONE_CORDLESS(BluetoothClass.Device.PHONE_CORDLESS),
    PHONE_ISDN(BluetoothClass.Device.PHONE_ISDN),
    PHONE_MODEM_OR_GATEWAY(BluetoothClass.Device.PHONE_MODEM_OR_GATEWAY),
    PHONE_SMART(BluetoothClass.Device.PHONE_SMART),
    PHONE_UNCATEGORIZED(BluetoothClass.Device.PHONE_UNCATEGORIZED),
    TOY_CONTROLLER(BluetoothClass.Device.TOY_CONTROLLER),
    TOY_DOLL_ACTION_FIGURE(BluetoothClass.Device.TOY_DOLL_ACTION_FIGURE),
    TOY_GAME(BluetoothClass.Device.TOY_GAME),
    TOY_ROBOT(BluetoothClass.Device.TOY_ROBOT),
    TOY_UNCATEGORIZED(BluetoothClass.Device.TOY_UNCATEGORIZED),
    TOY_VEHICLE(BluetoothClass.Device.TOY_VEHICLE),
    WEARABLE_GLASSES(BluetoothClass.Device.WEARABLE_GLASSES),
    WEARABLE_HELMET(BluetoothClass.Device.WEARABLE_HELMET),
    WEARABLE_JACKET(BluetoothClass.Device.WEARABLE_JACKET),
    WEARABLE_PAGER(BluetoothClass.Device.WEARABLE_PAGER),
    WEARABLE_UNCATEGORIZED(BluetoothClass.Device.WEARABLE_UNCATEGORIZED),
    WEARABLE_WRIST_WATCH(BluetoothClass.Device.WEARABLE_WRIST_WATCH),  //Major Bluetooth Components
    AUDIO_VIDEO(BluetoothClass.Device.Major.AUDIO_VIDEO),
    COMPUTER(BluetoothClass.Device.Major.COMPUTER),
    HEALTH(BluetoothClass.Device.Major.HEALTH),
    IMAGING(BluetoothClass.Device.Major.IMAGING),
    MISC(BluetoothClass.Device.Major.MISC),
    NETWORKING(BluetoothClass.Device.Major.NETWORKING),
    PERIPHERAL(BluetoothClass.Device.Major.PERIPHERAL),
    PHONE(BluetoothClass.Device.Major.PHONE),
    TOY(BluetoothClass.Device.Major.TOY),
    UNCATEGORIZED(BluetoothClass.Device.Major.UNCATEGORIZED),
    WEARABLE(BluetoothClass.Device.Major.WEARABLE),
    UNKNOWN(-1);
			
			
			
			
